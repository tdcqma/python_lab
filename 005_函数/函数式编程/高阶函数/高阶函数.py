# 变量可以指向函数
# 以python内置的求绝对值的函数abs()为例，调用该函数时用以下代码：
print(abs(-10))

# 但是如果只写abs呢,会打印<built-in function abs>
print(abs)
# 可见，abs(-10)是函数调用，而abs则是函数本身

# 要获得函数的调用结果，我们可以把结果赋值给变量
x = abs(-10)
print(x)

# 但是如果要把函数本身赋值给变量呢
f = abs
print('f:',f)

# 结论：函数本身也可以赋值给变量，即变量可以指向函数。
# 如果一个变量指向了一个函数，那么能不能这个变量来调用这个函数呢
f = abs
a = f(-10)
print('变量指向函数：',a)
# 成功！说明变量f现在已经指向了abs函数本身。直接调用abs()函数和调用变量f()完全相同。

#《函数名也是变量》
# 那么函数名是什么呢？函数名其实就是指向函数的变量！对于abs()这个函数，
# 完全可以把函数名abs看成变量，它指向一个可以计算绝对值的函数
# 如果把abs指向其他对象会有什么情况发生呢

#abs = 10
#print(abs(-10))

# 把abs指向10后，就无法通过abs(-10)调用该函数了！因为abs这个变量已经不指向求绝对值函数而是指向一个整数10！
# 当然实际代码绝对不能这么写，这里是为了说明函数名也是变量。要恢复abs函数，请重启Python交互环境。

print(abs(-10))


#《传入函数》
# 既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接受另一个函数作为参数，这种函数就成为高阶函数。
# 一个最简单的高阶函数

def add (x,y,f) :
    return f(x) + f(y)

a = add(-5,6,abs)
print('传入函数：',a)

# 当我们调用add(-5,6,abs)时，参数x，y，f分别接收-5,6和abs函数，
# x = -5
# y = 6
# f = abs
# f(x) + f(y) ==> abs(-5) + abs(6) ==> 11

